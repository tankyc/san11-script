// ## 2021/10/01 # 江东新风 # 官职条件错误修复 ##
// ## 2021/09/19 # 江东新风 # 改写高位判断逻辑，简化代码 ##
// ## 2020/12/24 # 江东新风 # 修复trace参数报错 ##
// ## 2020/07/26 ##
/*
@제작자: HoneyBee
@설명: 무장의 공적이 일정 수준이상이 되었을 경우에 [군주/도독] 신분이거나 [평북장군] 이상의 관직이면 고위 일러스트로 자동 변경되는 SCRIPT


※ 무장들의 老年은 50세로 통일 (각 무장마다 취향에 맞게 변경하셔도 됩니다.)
※ 조조, 유비, 유선, 손견, 손책, 손권, 원소, 원술은 군주 신분이면서 세력의 작위가 王 이상이어야 변경됨
※ GOLD EDITION PATCH에 동봉된 FACE DATA를 활용하셔야 정상적으로 반영됩니다. (중요)


*/

namespace 升官容貌变更
{

	// ================ CUSTOMIZE ================

	const int 功绩门槛 = 20000; 		  // 공적이 12000 이상인 경우
	const int 官职条件 = 官职_平北将军; 		  // 관직이 평북장군 이상인 경우

	const array<array<int>> 容貌设定 =
	{
	{武将_袁术,/*老年*/-1,/*高位青年*/1101,/*高位老年*/1201},
	{武将_袁绍,/*老年*/-1,/*高位青年*/1102,/*高位老年*/1202},
	{武将_贾诩,/*老年*/-1,/*高位青年*/1103,/*高位老年*/1203},
	{武将_郭嘉,/*老年*/-1,/*高位青年*/1104,/*高位老年*/1204},
	{武将_乐进,/*老年*/-1,/*高位青年*/1105,/*高位老年*/1205},
	{武将_夏侯渊,/*老年*/-1,/*高位青年*/1106,/*高位老年*/1206},
	{武将_夏侯惇,/*老年*/1007,/*高位青年*/1107,/*高位老年*/1207},
	{武将_关羽,/*老年*/1008,/*高位青年*/1108,/*高位老年*/1208},
	{武将_甘宁,/*老年*/1009,/*高位青年*/1109,/*高位老年*/1209},
	{武将_关平,/*老年*/-1,/*高位青年*/1110,/*高位老年*/1210},
	{武将_颜良,/*老年*/-1,/*高位青年*/1111,/*高位老年*/1211},
	{武将_魏延,/*老年*/-1,/*高位青年*/1112,/*高位老年*/1212},
	{武将_姜维,/*老年*/1013,/*高位青年*/1113,/*高位老年*/1213},
	{武将_许褚,/*老年*/-1,/*高位青年*/1114,/*高位老年*/1214},
	{武将_黄盖,/*老年*/-1,/*高位青年*/1115,/*高位老年*/1215},
	{武将_黄忠,/*老年*/1016,/*高位青年*/1116,/*高位老年*/1216},
	{武将_司马懿,/*老年*/1017,/*高位青年*/1117,/*高位老年*/1217},
	{武将_周瑜,/*老年*/1018,/*高位青年*/1118,/*高位老年*/1218},
	{武将_祝融,/*老年*/-1,/*高位青年*/1119,/*高位老年*/-1},
	{武将_荀彧,/*老年*/1020,/*高位青年*/1120,/*高位老年*/1220},
	{武将_荀攸,/*老年*/-1,/*高位青年*/1121,/*高位老年*/1221},
	{武将_诸葛亮,/*老年*/1022,/*高位青年*/-1,/*高位老年*/-1},
	{武将_徐晃,/*老年*/1023,/*高位青年*/1123,/*高位老年*/1223},
	{武将_徐庶,/*老年*/-1,/*高位青年*/1124,/*高位老年*/1224},
	{武将_曹叡,/*老年*/-1,/*高位青年*/1125,/*高位老年*/-1},
	{武将_曹洪,/*老年*/-1,/*高位青年*/1126,/*高位老年*/1226},
	{武将_曹仁,/*老年*/-1,/*高位青年*/1127,/*高位老年*/1227},
	{武将_曹操,/*老年*/1028,/*高位青年*/1128,/*高位老年*/1228},
	{武将_曹丕,/*老年*/-1,/*高位青年*/1129,/*高位老年*/1229},
	{武将_孙坚,/*老年*/-1,/*高位青年*/1130,/*高位老年*/1230},
	{武将_孙权,/*老年*/1031,/*高位青年*/1131,/*高位老年*/1231},
	{武将_孙策,/*老年*/1032,/*高位青年*/1132,/*高位老年*/1232},
	{武将_孙尚香,/*老年*/1033,/*高位青年*/-1,/*高位老年*/-1},
	{武将_太史慈,/*老年*/-1,/*高位青年*/1134,/*高位老年*/1234},
	{武将_赵云,/*老年*/1035,/*高位青年*/1135,/*高位老年*/1235},
	{武将_张郃,/*老年*/1036,/*高位青年*/1136,/*高位老年*/1236},
	{武将_貂蝉,/*老年*/1037,/*高位青年*/-1,/*高位老年*/-1},
	{武将_张飞,/*老年*/1038,/*高位青年*/1138,/*高位老年*/1238},
	{武将_张辽,/*老年*/1039,/*高位青年*/1139,/*高位老年*/1239},
	{武将_程昱,/*老年*/-1,/*高位青年*/1140,/*高位老年*/1240},
	{武将_典韦,/*老年*/-1,/*高位青年*/1141,/*高位老年*/1241},
	{武将_邓艾,/*老年*/1042,/*高位青年*/1142,/*高位老年*/1242},
	{武将_董卓,/*老年*/-1,/*高位青年*/1143,/*高位老年*/1243},
	{武将_马岱,/*老年*/-1,/*高位青年*/1144,/*高位老年*/1244},
	{武将_马超,/*老年*/1045,/*高位青年*/1145,/*高位老年*/1245},
	{武将_文丑,/*老年*/-1,/*高位青年*/1146,/*高位老年*/1246},
	{武将_庞统,/*老年*/-1,/*高位青年*/1147,/*高位老年*/1247},
	{武将_庞德,/*老年*/-1,/*高位青年*/1148,/*高位老年*/1248},
	{武将_孟获,/*老年*/-1,/*高位青年*/1149,/*高位老年*/1249},
	{武将_陆逊,/*老年*/1050,/*高位青年*/1150,/*高位老年*/1250},
	{武将_李典,/*老年*/-1,/*高位青年*/1151,/*高位老年*/-1},
	{武将_刘禅,/*老年*/-1,/*高位青年*/1152,/*高位老年*/-1},
	{武将_刘备,/*老年*/1053,/*高位青年*/1153,/*高位老年*/1253},
	{武将_凌统,/*老年*/-1,/*高位青年*/1154,/*高位老年*/1254},
	{武将_吕布,/*老年*/1055,/*高位青年*/1155,/*高位老年*/1255},
	{武将_吕蒙,/*老年*/1056,/*高位青年*/1156,/*高位老年*/1256},
	{武将_鲁肃,/*老年*/-1,/*高位青年*/1157,/*高位老年*/1257}
	};

	// ===========================================


	class Main
	{
		Main()
		{
			//pk::bind(107, pk::trigger107_t(callback));
			pk::bind(108, pk::trigger108_t(callback));//以月为单位变或许好点？
			pk::bind(203, pk::trigger203_t(callback));//原游戏中容貌变更的trigger
			//pk::bind(102, -1, pk::trigger102_t(face_repair));
		}

		void face_repair()
		{
			for (int i = 0; i < 武将_末; ++i)
			{
				pk::person@person = pk::get_person(i);
				if (pk::is_alive(person))
				{
					pk::set_face(person,i);
				}
			}
		}

		void callback()
		{
			face_change_set();
		}

		void face_change_set()
		{
			for (int i = 0; i < int(容貌设定.length); i++)
			{
				pk::person@ person_0 = pk::get_person(容貌设定[i][0]);
				//原老年头像设定
				if (person_0.face < 1000 and (person_0.old_age + person_0.birth - 1) > pk::get_year())
				{
					if (容貌设定[i][1] != -1)
					{
						pk::set_face(person_0, 容貌设定[i][1]);
						pk::model_change(person_0, true);//此函数用于武将头像变更后对应武将模型的变更
					}
				}
				////特殊君主以特殊方式判断高位
				if (person_0.mibun == 身份_君主)
				{	
					if (容貌设定[i][0] == 武将_曹操 or 容貌设定[i][0] == 武将_刘备 or 容貌设定[i][0] == 武将_孙权 or 容貌设定[i][0] == 武将_孙坚 or 容貌设定[i][0] == 武将_孙策 or 容貌设定[i][0] == 武将_袁绍 or 容貌设定[i][0] == 武将_袁术 or 容貌设定[i][0] == 武将_吕布)
					{
						if (pk::get_scenario().no == 7 or pk::get_scenario().no == 13)
						{
							if (pk::get_force(person_0.get_force_id()).title <= 爵位_王)
							{
								if (容貌设定[i][2] != -1) pk::set_face(person_0, 容貌设定[i][2]);
							}
						}
						else if (pk::get_scenario().no != 7 and pk::get_scenario().no != 13)
						{
							if (pk::get_force(person_0.get_force_id()).title <= 爵位_王)
							{
								if (容貌设定[i][2] != -1) pk::set_face(person_0, 容貌设定[i][2]);

								if (person_0.old_age != 255 and (person_0.old_age + person_0.birth  - 1) > pk::get_year())
								{
									if (容貌设定[i][3] != -1) pk::set_face(person_0, 容貌设定[i][3]);
								}
								else if (person_0.old_age == 255 and pk::get_year() >= (person_0.birth + 49))
								{
									if (容貌设定[i][3] != -1) pk::set_face(person_0, 容貌设定[i][3]);
								}
							}
						}
						continue;//对应君主经过这里判断后会跳到下一位
					}
				}
				//非特殊君主的情况
				if (pk::get_scenario().no == 7 or pk::get_scenario().no == 13)
				{
					if ((person_0.kouseki >= 功绩门槛) and (person_0.rank <= 官职条件))//官职越大，数字越小
					{
						if (容貌设定[i][2] != -1) pk::set_face(person_0, 容貌设定[i][2]);
					}				
				}
				else if (pk::get_scenario().no != 7 and pk::get_scenario().no != 13)
				{
					if ((person_0.kouseki >= 功绩门槛) and (person_0.rank <= 官职条件))
					{
						if (容貌设定[i][2] != -1) pk::set_face(person_0, 容貌设定[i][2]);

						if (person_0.old_age != 255 and (person_0.old_age + person_0.birth - 1) > pk::get_year())
						{
							if (容貌设定[i][3] != -1) pk::set_face(person_0, 容貌设定[i][3]);
						}
						else if (person_0.old_age == 255 and pk::get_year() >= (person_0.birth + 49))
						{
							if (容貌设定[i][3] != -1) pk::set_face(person_0, 容貌设定[i][3]);
						}
					}
				}

			}
		}

	} // class Main

	Main main;

} // namespace